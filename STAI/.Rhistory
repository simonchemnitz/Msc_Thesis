geom_path(data = subset(complete_roc_df, ref ==TRUE),
color = "tomato4",
size = 1.01)+
scale_x_reverse()
#plot curves
ggplot(complete_roc_df, aes(x = spec, y = sens, color = ref))+
geom_path()+
scale_linetype_manual(values=rep("solid",4))+
scale_shape_manual(values=c(0,1))+
scale_colour_manual(values = c(lblue, lblue))+
xlab("Specificity")+ylab("Sensitivity")+
geom_path(data = subset(complete_roc_df, ref ==TRUE),
color = "tomato4",
size = 1.01)+
scale_x_reverse()
#plot curves
ggplot(complete_roc_df, aes(x = spec, y = sens, color = ref))+
geom_path()+
scale_linetype_manual(values=rep("solid",4))+
scale_shape_manual(values=c(0,1))+
scale_colour_manual(values = c(lblue, lblue))+
xlab("Specificity")+ylab("Sensitivity")+
geom_path(data = subset(complete_roc_df, ref ==TRUE),
color = "tomato4",
size = 1.01)+
geom_text(show.legend = FALSE)+
scale_x_reverse()
#plot curves
ggplot(complete_roc_df, aes(x = spec, y = sens, color = ref))+
geom_path()+
scale_linetype_manual(values=rep("solid",4))+
scale_shape_manual(values=c(0,1))+
scale_colour_manual(values = c(lblue, lblue))+
xlab("Specificity")+ylab("Sensitivity")+
geom_path(data = subset(complete_roc_df, ref ==TRUE),
color = "tomato4",
size = 1.01)+
scale_x_reverse()
#plot curves
ggplot(complete_roc_df, aes(x = spec, y = sens, color = ref))+
geom_path()+
scale_linetype_manual(values=rep("solid",4))+
scale_shape_manual(values=c(0,1))+
scale_colour_manual(values = c(lblue, lblue))+
xlab("Specificity")+ylab("Sensitivity")+
geom_path(data = subset(complete_roc_df, ref ==TRUE),
color = "tomato4",
size = 1.01)+
guides(fill=FALSE)+
scale_x_reverse()
#plot curves
ggplot(complete_roc_df, aes(x = spec, y = sens, color = ref))+
geom_path()+
scale_linetype_manual(values=rep("solid",4))+
scale_shape_manual(values=c(0,1))+
scale_colour_manual(values = c(lblue, lblue))+
xlab("Specificity")+ylab("Sensitivity")+
geom_path(data = subset(complete_roc_df, ref ==TRUE),
color = "tomato4",
size = 1.01)+
guides(fill=FALSE)+
guides(color=FALSE)+
scale_x_reverse()
#plot curves
ggplot(complete_roc_df, aes(x = spec, y = sens, color = ref))+
geom_path()+
scale_linetype_manual(values=rep("solid",4))+
scale_shape_manual(values=c(0,1))+
scale_colour_manual(values = c(lblue, lblue))+
xlab("Specificity")+ylab("Sensitivity")+
geom_path(data = subset(complete_roc_df, ref ==TRUE),
color = "tomato4",
size = 1.01)+
guides(color=FALSE)+
scale_x_reverse()
glm_mod = glm(form1, data = df, family = binomial)
prob_pred = predict(glm_mod, newdata = df, type = "response")
roc_df = roc(df$survived ~ prob_pred, plot = F, print.auc = F)
roc_df
roc_df$auc
glm_mod = glm(form4, data = df, family = binomial)
prob_pred = predict(glm_mod, newdata = df, type = "response")
roc_df = roc(df$survived ~ prob_pred, plot = F, print.auc = F)
roc_df$auc
roc_df$auc
roc_df$auc[2]
roc_df$auc[1]
roc_df$auc[[1]]
model_1 = survived ~ sex
model_2 = survived ~ age+sex
model_3 = survived ~ age+sex+pclass
model_4 = survived ~ age+sex*pclass
model_5 = survived ~ age+fam+sex*pclass
model_6 = survived ~ log(age)+sex*pclass
model_7 = survived ~ log(age)+factor(fam)*sex*pclass
model_8 = survived ~ ns(age, df = 3) + sex*pclass
model_9 = survived ~ ns(age, df = 3) + fam + sex*pclass
model_10 = survived ~ ns(age, df = 3) + ns(fam, df = 3) + sex*pclass
forms = c(model_1,model_2,model_3,model_4,model_5,
model_6,model_7,model_8,model_9,model_10)
for (f in forms) {
glm_mod = glm(f, data = df, family = binomial)
prob_pred = predict(glm_mod, newdata = df, type = "response")
roc_df = roc(df$survived ~ prob_pred, plot = F, print.auc = F)
print(roc_df$auc[[1]])
}
aucs = c()
for (f in forms) {
glm_mod = glm(f, data = df, family = binomial)
prob_pred = predict(glm_mod, newdata = df, type = "response")
roc_df = roc(df$survived ~ prob_pred, plot = F, print.auc = F)
aucs = c(aucs,roc_df$auc[[1]] )
}
aucs
max(aucs)
glm_mod = glm(model_4, data = df, family = binomial)
prob_pred = predict(glm_mod, newdata = df, type = "response")
roc_df = roc(df$survived ~ prob_pred, plot = F, print.auc = F)
roc_df$auc[[1]]
max(aucs)roc_df$auc[[1]]
max(aucs)-roc_df$auc[[1]]
#           among family memebers
ggplot(count(df, fam,survived ), aes(x = fam,y = n, order=survived))+
geom_bar(stat = "identity",
position = "dodge2",
aes(fill = survived),
alpha = 0.8)+
ylab("Count")+xlab("Family Members")+
scale_x_continuous(breaks = seq(0, 10, by = 1))+
#define custom fill colors
scale_fill_gradientn(
colours = c(blue, lblue),
values = c(0,1),
breaks = c(0,1),
labels = c(0,1),
guide = guide_legend())
#           among family memebers
ggplot(count(df, fam,survived ), aes(x = fam,y = n, order=survived))+
geom_bar(stat = "identity",
position = "dodge2",
aes(fill = survived),
alpha = 0.8)+
ylab("Count")+xlab("Family Members")+
scale_x_continuous(breaks = seq(0, 10, by = 1))+
#define custom fill colors
scale_fill_gradientn(
colours = c(blue, lblue),
values = c(0,1),
breaks = c(0,1),
labels = c(0,1),
guide = guide_legend())
#Count Dataframe
count_df = count(na.omit(df), sibsp, parch, sex, pclass, survived)
#           PARCH/SIBSP
#melted count dataframe
m_count = melt(count_df[,c("sibsp", "parch", "n")], id.vars = "n")
#plot
ggplot(m_count,
aes(x = value, y = n))+
#barplot
geom_bar(stat = "identity", fill = blue, alpha = 0.8)+
scale_x_continuous(breaks = seq(0, 8, by = 1))+
xlab("")+ylab("Count")+
#do the barplot for each variable
facet_wrap(~variable, scale = "free_x")
## ----Marginal Distributions----
#           AGE
ggplot(df, aes(age))+
geom_histogram(alpha = 0.8, fill =blue )+
geom_bar(fill = lblue)+
xlab("Age")+ylab("Count")+
scale_x_continuous(breaks = seq(0, 80, by = 5))
exp(-0.070407
c
exp(-0.070407
=
exp(-0.070407)
## ----Packages----
library(ggplot2)
library(reshape2)
library(lattice)
library(latticeExtra)
library(gridExtra)
library(hexbin)
library(xtable)
library(splines)
library(dplyr)
library(tidyr)
library(caret)
library(knitr)
library(boot)
library(data.table)
library(pROC)
library(plotROC)
library(rlang)
library(tidyverse)
library(MASS)
## ----Functions & Variables----
cor.print = function(x,y){
panel.text(mean(range(x)),mean(range(y)),
paste("", round(cor(x,y),digits = 2), "", sep  = "")
)
}
#function to create boxplots for each contin var
conditional_plots = function(relevant_df, lst_contvar, lst_factorvar){
#df: dataframe of observations
#lst_contvar, list of continouos variables
#lst_factorvar, list of factor variables
#given this input creates for each cont var
#a boxplot split on each factor variable
#for each continouus variables
#create a figure with y axis boxplot of age
#one box for each level in each factor
for (contvar in lst_contvar) {
#melt the dataframe
melt_df = melt(na.omit( relevant_df[,c(contvar ,lst_factorvar )] ) , id = contvar)
#create the ggplot
p = ggplot(melt_df,
aes(x = factor(value),
y = melt_df[[contvar]],
color = value))+
#add boxplot
geom_boxplot(fill = blue, color = blue, alpha = 0.8)+
#change labels
xlab("")+ylab(contvar)+
#do above for each factor
facet_wrap(~variable, scale = "free_x", ncol = 3)
#show plot
print(p)
}
}
#function to create marginal count plots
#for each factor variable
marginal_factor_plots = function(relevant_df, lst_factorvar){
#create a temperary dataframe
temp_df = copy(relevant_df)
#add and id variable needed for melting
temp_df["id"] = 1
#melt the dataframe
mdf = melt(temp_df[c(lst_factorvar, "id")], id.vars = "id")
#create count bar plot
p = ggplot(mdf,
aes(x = value)
)+
#add bar plots
geom_bar(stat = "count", alpha = 0.8, fill = blue)+
#facet wrap for each factor variable
facet_wrap(~variable, scale = "free_x")+
xlab("")+ ylab("Count")
print(p)
}
#function to create histogram
#for each contin var
marginal_contin_plots = function(relevant_df, lst_contvar, bar = T){
for (cvar in lst_contvar) {
p = ggplot(relevant_df,
aes(x = relevant_df[[cvar]]))+
geom_histogram(fill = blue, alpha = 0.8)+
xlab(cvar)+ylab("Count")
if(bar){
p = p+geom_bar(fill = lblue)
}
#geom_bar(fill = lblue)+
print(p)
}
}
library(survival)
data(veteran)
head(veteran)
str(veteran)
cvar = c("time","karno","diagtime", "age")
fvar = c("trt", "celltype", "prior", "status")
marginal_contin_plots(veteran, cvar, bar = F)
marginal_factor_plots(veteran, fvar)
surv_model = survfit(Surv(time, status ))
surv_model = survfit(Surv(time, status == 1 ) ~ age + diagtime+karno+celltype+trt,
data = veteran)
plot(surv_model)
plot(surv_model, mark.time = F, conf.int = F)
surv_model = survfit(Surv(time, status == 1 ) ~ +trt,
data = veteran)
plot(surv_model, mark.time = F, conf.int = F)
plot(surv_model, mark.time = F, conf.int = F,
col = c(blue, lblue))
#Beautiful colours :-)
blue = "deepskyblue4"
lblue = "deepskyblue1"
plot(surv_model, mark.time = F, conf.int = F,
col = c(blue, lblue))
legend(levels = veteran$trt, col = c(blue, lblue))
legend(levels(veteran$trt), col = c(blue, lblue))
legend(800,0.9levels(veteran$trt), col = c(blue, lblue))
legend(800,0.9,levels(veteran$trt), col = c(blue, lblue))
legend(30,1.08,levels(veteran$trt), col = c(blue, lblue))
legend("topright",levels(veteran$trt), col = c(blue, lblue))
legend("topright",levels(veteran$trt), col = c(blue, lblue))
?legend
legend(30,levels(veteran$trt), col = c(blue, lblue))
legend(30,legend = levels(veteran$trt), col = c(blue, lblue))
levels(veteran$trt)
veteran$trt
?levels
legend(30,legend = c(1,2), col = c(blue, lblue))
legend(x = 800, y = 0.9,legend = c(1,2), col = c(blue, lblue))
legend(x = 800, y = 0.9,legend = c(1,2), col = c(blue, lblue))
legend("topright",legend = c(1,2), col = c(blue, lblue))
legend(legend = c(1,2), col = c(blue, lblue), pch = 1)
legend(x = 800, y  = 0.9legend = c(1,2), col = c(blue, lblue), pch = 1)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 1)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue))
plot(surv_model, mark.time = F, conf.int = F,
col = c(blue, lblue))
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue))
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 1)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 2)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 3)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 4)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 5)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 0)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 7)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 8)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 9)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 10)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 11)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 15)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), pch = 16)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), lty = 16)
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), lty = 1)
?legend
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), lty = 1, title ="Treatment")
surv_model = survfit(Surv(time, status == 1 ) ~ +celltype,
data = veteran)
plot(surv_model, mark.time = F, conf.int = F,
col = c(blue, lblue))
plot(surv_model, mark.time = F, conf.int = F,
col = c(blue, lblue, "red", "blue"))
legend(x = 800, y  = 0.9,legend = c(1,2),
col = c(blue, lblue, "red", "blue"),
lty = 1, title ="celltype")
veteran$celltype
legend(x = 800, y  = 0.9,legend = levels(veteran$celltype),
col = c(blue, lblue, "red", "blue"),
lty = 1, title ="celltype")
legend(x = 600, y  = 0.9,legend = levels(veteran$celltype),
col = c(blue, lblue, "red", "blue"),
lty = 1, title ="celltype")
t
t
plot(surv_model, mark.time = F, conf.int = F,
col = c(blue, lblue, "red", "blue"))
legend(x = 600, y  = 0.9,legend = levels(veteran$celltype),
col = c(blue, lblue, "red", "blue"),
lty = 1, title ="celltype")
legend(x = 800, y  = 0.9,legend = levels(veteran$trt), col = c(blue, lblue), lty = 1, title ="Treatment")
surv_model = survfit(Surv(time, status == 1 ) ~ +trt,
data = veteran)
plot(surv_model, mark.time = F, conf.int = F,
col = c(blue, lblue))
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), lty = 1, title ="Treatment")
surv_model = survfit(Surv(time, status == 1 ) ~ +celltype,
data = veteran)
plot(surv_model, mark.time = F, conf.int = F,
col = c(blue, lblue, "red", "blue"))
legend(x = 600, y  = 0.9,legend = levels(veteran$celltype),
col = c(blue, lblue, "red", "blue"),
lty = 1, title ="celltype")
surv_model = survfit(Surv(time, status == 1 ) ~ +trt,
data = veteran)
plot(surv_model, mark.time = F, conf.int = F,
col = c(blue, lblue))
legend(x = 800, y  = 0.9,legend = c(1,2), col = c(blue, lblue), lty = 1, title ="Treatment")
surv_model = survfit(Surv(time, status == 1 ) ~ +celltype,
data = veteran)
plot(surv_model, mark.time = F, conf.int = F,
col = c(blue, lblue, "red", "blue"))
legend(x = 600, y  = 0.9,legend = levels(veteran$celltype),
col = c(blue, lblue, "red", "blue"),
lty = 1, title ="celltype")
#cox model
form = Surv(time, status == 1)~celltype+trt+age+diagtime+karno+prior
cox_mod = coxph(form, data = veteran)
testtab = drop1(cox_mod, test = "Chisq")
ord = order(testtab[,4][-1])+1
kable(testtab[ord])
kable(testtab[ord,])
#cox model treatment
form = Surv(time, status == 1)~trt
cox_mod = coxph(form, data = veteran)
w = predict(cox_mod, type = "risk")
w
orddtime = order(veteran$time)
stat = (veteran$status == 1)[orddtime]
W = rev( cumsum( w[rev(orddtime)] ) )
Lambda = cumsum(stat / W)
CSres = CSres[ordres]
CSres = Lambda*w[orddtime]
ordres = order(CSres)
CSres = CSres[ordres]
statres = sta[ordres]
statres = stat[ordres]
#cumulative hazards
tmp = survfit(Surv(CSres, statres) ~1,
type = "flemming-harrington")
#cumulative hazards
tmp = survfit(Surv(CSres, statres) ~1,
type = "fleming-harrington")
CumHaz = -log(temp$surv)[statres]
#cumulative hazards
tmp = survfit(Surv(CSres, statres) ~1,
type = "fleming-harrington")
CumHaz = -log(temp$surv)[statres]
CumHaz = -log(tmp$surv)[statres]
#plot
qplot(CSres[statres], CumHaz)+
geom_abline(intercept = 0, slope = 1, color = lblue)+
geom_point(color = blue)+
ylab("Cum.Hazards")+xlab("Cox-Snell Residuals")
#plot
qplot(CSres[statres], CumHaz)+
geom_point(color = blue)+
geom_abline(intercept = 0, slope = 1, color = lblue)+
ylab("Cum.Hazards")+xlab("Cox-Snell Residuals")
#cox model treatment
form = Surv(time, status == 1)~celltype
cox_mod = coxph(form, data = veteran)
#COX SNELL residuals
w = predict(cox_mod, type = "risk")
orddtime = order(veteran$time)
stat = (veteran$status == 1)[orddtime]
W = rev( cumsum( w[rev(orddtime)] ) )
Lambda = cumsum(stat / W)
#ordered cos snell residuals
CSres = Lambda*w[orddtime]
ordres = order(CSres)
CSres = CSres[ordres]
#indicator of non censoring
#in status
statres = stat[ordres]
#cumulative hazards
tmp = survfit(Surv(CSres, statres) ~1,
type = "fleming-harrington")
CumHaz = -log(tmp$surv)[statres]
#plot
qplot(CSres[statres], CumHaz)+
geom_point(color = blue)+
geom_abline(intercept = 0, slope = 1, color = lblue)+
ylab("Cum.Hazards")+xlab("Cox-Snell Residuals")
qplot(veteran$time[orddtime], exp(-Lambda), geom = "step")
plot(survfit(cox_mod, type = "aalen"), mark.time = F)
?manova
library(gtsummary)
t1 <- tbl_regression(model)
library(gtsummary)
update.packages("fastmap").
update.packages("fastmap")
library(gtsummary)
install.packages("fastmap")
install.packages("fastmap")
library(gtsummary)
install.packages("gtsummary")
library(gtsummary)
install.packages("ggplot2")
install.packages("reshape2")
install.packages("lattice")
install.packages("latticeExtra")
install.packages("gridExtra")
install.packages("hexbin")
install.packages("xtable")
install.packages("splines")
install.packages("dplyr")
install.packages("tidyr")
install.packages("caret")
install.packages("knitr")
install.packages("boot")
install.packages("data.table")
install.packages("pROC")
install.packages("plotROC")
install.packages("rlang")
install.packages("tidyverse")
install.packages("MASS")
install.packages("glasso")
install.packages("lpSolve")
install.packages("markdown")
install.packages("fastmap")
install.packages("gtsummary")
df = read.csv("full_child_df.csv")
head(df,3)
df <- df %>%
gather(key = "time", value = "score", Before_Mock, After_Mock) %>%
convert_as_factor(pers_id, time)
head(df, 3)
#GLM model
model = lm(score ~ age + app + Trait + time  + gender, data = df)
setwd("~/Documents/GitHub/Msc_Thesis/STAI")
df = read.csv("full_child_df_rms.csv")
model = lm(mpr.age ~ app+age+Trait+gender+Before_Mock, data = df)
summary(model)
library(gtsummary)
t1 <- tbl_regression(model)
# Use function from gt package to save table, after converting to
# gt object using as_gt()
gt::gtsave(as_gt(t1), file = file.path(tempdir(), "temp.png"))
webshot::install_phantomjs()
# Use function from gt package to save table, after converting to
# gt object using as_gt()
gt::gtsave(as_gt(t1), file = file.path(tempdir(), "temp.png"))
t1
gtsave
?gtsave
# Use function from gt package to save table, after converting to
# gt object using as_gt()
gt::gtsave(as_gt(t1), filename = "test.png")
